namespace Book_Store
{










    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Data.OleDb;
    using System.Drawing;
    using System.Web;
    using System.Web.SessionState;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.UI.HtmlControls;





 public         class BookDetail : System.Web.UI.Page

    {




  protected CCUtility Utility;








  protected string Detail_FormAction="ShoppingCart.aspx?";

  protected string Order_FormAction="ShoppingCart.aspx?";

  protected string Rating_FormAction="BookDetail.aspx?";
protected String[] Rating_rating_lov = "1;Deficient;2;Regular;3;Good;4;Very Good;5;Excellent".Split( CxNull);


 public BookDetail()
 {
 this.Init += new System.EventHandler(Page_Init);
 }





 public void ValidateNumeric(object source, ServerValidateEventArgs args) {
   try{
    Decimal temp=Decimal.Parse(args.Value);
    args.IsValid=true;
          }catch{
    args.IsValid=false; }
  }


        protected void Page_Load(object sender, EventArgs e)
        {
  Utility=new CCUtility(this);












  Utility.CheckSecurity(1);



  if (!IsPostBack){

   p_Detail_item_id.Value = Utility.GetParam("item_id");
   p_Order_order_id.Value = Utility.GetParam("order_id");
   p_Rating_item_id.Value = Utility.GetParam("item_id");Page_Show(sender, e);
  }
 }

 protected void Page_Unload(object sender, EventArgs e)
 {



  if(Utility!=null) Utility.DBClose();
 }

 protected void Page_Init(object sender, EventArgs e)
 {



  InitializeComponent();

  Order_insert.ServerClick += new System.EventHandler (this.Order_Action);

  Rating_update.ServerClick += new System.EventHandler (this.Rating_Action);


 }





        private void InitializeComponent()
        {
        }


        protected void Page_Show(object sender, EventArgs e)
        {
  Detail_Show();
  Order_Show();
  Rating_Show();

        }












private bool Detail_Validate(){
 bool result=true;
 Detail_ValidationSummary.Text="";

 for(int i=0;i<Page.Validators.Count;i++){
  if(((System.Web.UI.WebControls.BaseValidator)Page.Validators[i]).ID.ToString().StartsWith("Detail")){
   if(!Page.Validators[i].IsValid){
    Detail_ValidationSummary.Text+=Page.Validators[i].ErrorMessage+"";
    result=false;
   }
  }
 }

 Detail_ValidationSummary.Visible=(!result);
 return result;
}

/*===============================
 Display Record Form
-------------------------------*/


void Detail_Show() {



 bool ActionInsert=true;

 if (p_Detail_item_id.Value.Length > 0 ) {
  string sWhere = "";

  sWhere += "item_id=" + CCUtility.ToSQL(p_Detail_item_id.Value, FieldTypes.Number);



  string sSQL = "select * from items where " + sWhere;
  OleDbDataAdapter dsCommand = new OleDbDataAdapter(sSQL, Utility.Connection);
  DataSet ds = new DataSet();
  DataRow row;

  if (dsCommand.Fill(ds, 0, 1, "Detail") > 0) {
  row = ds.Tables[0].Rows[0];

 Detail_item_id.Value = CCUtility.GetValue(row, "item_id");


 Detail_name.Text =Server.HtmlEncode(CCUtility.GetValue(row, "name").ToString());




 Detail_author.Text =Server.HtmlEncode(CCUtility.GetValue(row, "author").ToString());




 Detail_category_id.Text =Server.HtmlEncode( Utility.Dlookup("categories", "name", "category_id=" + CCUtility.ToSQL(CCUtility.GetValue(row, "category_id"), FieldTypes.Number)).ToString());




 Detail_price.Text =Server.HtmlEncode(CCUtility.GetValue(row, "price").ToString());




 Detail_image_url.Text =CCUtility.GetValue(row, "image_url");

  Detail_image_url.NavigateUrl=CCUtility.GetValue(row, "product_url")+"";


 Detail_notes.Text =CCUtility.GetValue(row, "notes");




 Detail_product_url.Text =Server.HtmlEncode(CCUtility.GetValue(row, "product_url").ToString());

  Detail_product_url.NavigateUrl=CCUtility.GetValue(row, "product_url")+"";



  ActionInsert=false;




 }}

  if(ActionInsert){

  String pValue;

  pValue = Utility.GetParam("item_id");Detail_item_id.Value = pValue;



}







Detail_image_url.ImageUrl=Detail_image_url.Text;
Detail_product_url.Text="Review      book on Amazon.com";







 }




 void Detail_BeforeSQLExecute(string SQL,String Action){




 }










private bool Order_Validate(){
 bool result=true;
 Order_ValidationSummary.Text="";

 for(int i=0;i<Page.Validators.Count;i++){
  if(((System.Web.UI.WebControls.BaseValidator)Page.Validators[i]).ID.ToString().StartsWith("Order")){
   if(!Page.Validators[i].IsValid){
    Order_ValidationSummary.Text+=Page.Validators[i].ErrorMessage+"";
    result=false;
   }
  }
 }

 Order_ValidationSummary.Visible=(!result);
 return result;
}

/*===============================
 Display Record Form
-------------------------------*/


void Order_Show() {



 bool ActionInsert=true;

 if (p_Order_order_id.Value.Length > 0 ) {
  string sWhere = "";

  sWhere += "order_id=" + CCUtility.ToSQL(p_Order_order_id.Value, FieldTypes.Number);



  string sSQL = "select * from orders where " + sWhere;
  OleDbDataAdapter dsCommand = new OleDbDataAdapter(sSQL, Utility.Connection);
  DataSet ds = new DataSet();
  DataRow row;

  if (dsCommand.Fill(ds, 0, 1, "Order") > 0) {
  row = ds.Tables[0].Rows[0];

 Order_order_id.Value = CCUtility.GetValue(row, "order_id");


 Order_quantity.Text = CCUtility.GetValue(row, "quantity");
 Order_item_id.Value = CCUtility.GetValue(row, "item_id");


 Order_insert.Visible=false;
  ActionInsert=false;




 }}

  if(ActionInsert){

  String pValue;

  pValue = Utility.GetParam("item_id");Order_item_id.Value = pValue;



}














 }



bool Order_insert_Click(Object Src, EventArgs E) {
  string sSQL="";
  bool bResult=Order_Validate();




  string s1_UserID=CCUtility.ToSQL(Session["UserID"].ToString(), FieldTypes.Number);
  string p2_quantity=CCUtility.ToSQL(Utility.GetParam("Order_quantity"), FieldTypes.Number) ;
  string p2_item_id=CCUtility.ToSQL(Utility.GetParam("Order_item_id"), FieldTypes.Number) ;




  if(bResult){

   if(sSQL.Length==0){
   sSQL = "insert into orders (" +
    "[member_id]," +
    "quantity," +
    "item_id)" +
    " values (" +
    s1_UserID + "," +
    p2_quantity + "," +
    p2_item_id + ")";
   }
   Order_BeforeSQLExecute(sSQL,"Insert");
   OleDbCommand cmd = new OleDbCommand(sSQL, Utility.Connection);
   try {
    cmd.ExecuteNonQuery();
   } catch(Exception e) {
    Order_ValidationSummary.Text += e.Message;
    Order_ValidationSummary.Visible = true;
    return false;
   }



  }
  return bResult;
 }


 void Order_BeforeSQLExecute(string SQL,String Action){




 }


void Order_Action(Object Src, EventArgs E) {
bool bResult=true;
if(((HtmlInputButton)Src).ID.IndexOf("insert")>0) bResult=Order_insert_Click(Src,E);


if(bResult)Response.Redirect(Order_FormAction+"");
}










private bool Rating_Validate(){
 bool result=true;
 Rating_ValidationSummary.Text="";

 for(int i=0;i<Page.Validators.Count;i++){
  if(((System.Web.UI.WebControls.BaseValidator)Page.Validators[i]).ID.ToString().StartsWith("Rating")){
   if(!Page.Validators[i].IsValid){
    Rating_ValidationSummary.Text+=Page.Validators[i].ErrorMessage+"";
    result=false;
   }
  }
 }

 Rating_ValidationSummary.Visible=(!result);
 return result;
}

/*===============================
 Display Record Form
-------------------------------*/


void Rating_Show() {


 Utility.buildListBox(Rating_rating.Items,Rating_rating_lov,null,"");

 bool ActionInsert=true;

 if (p_Rating_item_id.Value.Length > 0 ) {
  string sWhere = "";

  sWhere += "item_id=" + CCUtility.ToSQL(p_Rating_item_id.Value, FieldTypes.Number);



  string sSQL = "select * from items where " + sWhere;
  OleDbDataAdapter dsCommand = new OleDbDataAdapter(sSQL, Utility.Connection);
  DataSet ds = new DataSet();
  DataRow row;

  if (dsCommand.Fill(ds, 0, 1, "Rating") > 0) {
  row = ds.Tables[0].Rows[0];

 Rating_item_id.Value = CCUtility.GetValue(row, "item_id");


 Rating_rating_view.Text =CCUtility.GetValue(row, "rating");




 Rating_rating_count_view.Text =Server.HtmlEncode(CCUtility.GetValue(row, "rating_count").ToString());





  {string s;
  s=CCUtility.GetValue(row, "rating");

  try {Rating_rating.SelectedIndex=Rating_rating.Items.IndexOf(Rating_rating.Items.FindByValue(s));
  }catch{}}


 Rating_rating_count.Value = CCUtility.GetValue(row, "rating_count");



  ActionInsert=false;




 }}

  if(ActionInsert){

  String pValue;

  pValue = Utility.GetParam("item_id");Rating_item_id.Value = pValue;Rating_update.Visible=false;




}







if (Int16.Parse(Rating_rating_view.Text)==0){
  Rating_rating_view.Text="Not rated yet";
  Rating_rating_count_view.Text="";
}else{
  Rating_rating_view.Text="<img src=images/" + System.Math.Round(Double.Parse(Rating_rating.SelectedItem.Value)/Double.Parse(Rating_rating_count.Value)) + "stars.gif>";
}







 }




 void Rating_BeforeSQLExecute(string SQL,String Action){




 }


 bool Rating_update_Click(Object Src, EventArgs E) {
     string sWhere = "";
  string sSQL ="";

  bool bResult=Rating_Validate();
  if(bResult){

         if (p_Rating_item_id.Value.Length > 0) {
             sWhere = sWhere + "item_id=" + CCUtility.ToSQL(p_Rating_item_id.Value, FieldTypes.Number);
      }




  if (bResult){

  sSQL = "update items set " +
  "[rating]=" +CCUtility.ToSQL(Utility.GetParam("Rating_rating"),FieldTypes.Number)  +
  ",[rating_count]=" +CCUtility.ToSQL(Utility.GetParam("Rating_rating_count"),FieldTypes.Number) ;


         sSQL = sSQL + " where " + sWhere;


sSQL="update items set rating=rating+" + Rating_rating.SelectedItem.Value + ", rating_count=rating_count+1 where item_id=" + Rating_item_id.Value;

Rating_BeforeSQLExecute(sSQL,"Update");
  OleDbCommand cmd = new OleDbCommand(sSQL, Utility.Connection);
   try {
    cmd.ExecuteNonQuery();
   } catch(Exception e) {
    Rating_ValidationSummary.Text += e.Message;
    Rating_ValidationSummary.Visible = true;
    return false;
   }
  }

  if (bResult){


  }
  }
  return bResult;
 }

void Rating_Action(Object Src, EventArgs E) {
bool bResult=true;
if(((HtmlInputButton)Src).ID.IndexOf("update")>0) bResult=Rating_update_Click(Src,E);


if(bResult)Response.Redirect(Rating_FormAction+"item_id=" + Server.UrlEncode(Utility.GetParam("item_id")) + "&");
}




    }
}
 