namespace Book_Store
{









    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data;
    using System.Data.OleDb;
    using System.Drawing;
    using System.Web;
    using System.Web.SessionState;
    using System.Web.UI;
    using System.Web.UI.WebControls;
    using System.Web.UI.HtmlControls;





 public         class MyInfo : System.Web.UI.Page

    {




  protected CCUtility Utility;




  protected string Form_FormAction="ShoppingCart.aspx?";


 public MyInfo()
 {
 this.Init += new System.EventHandler(Page_Init);
 }





 public void ValidateNumeric(object source, ServerValidateEventArgs args) {
   try{
    Decimal temp=Decimal.Parse(args.Value);
    args.IsValid=true;
          }catch{
    args.IsValid=false; }
  }


        protected void Page_Load(object sender, EventArgs e)
        {
  Utility=new CCUtility(this);












  Utility.CheckSecurity(1);



  if (!IsPostBack){

   if(Session["UserID"]!=null)
   p_Form_member_id.Value = Session["UserID"].ToString();
   else
   p_Form_member_id.Value="";
   Page_Show(sender, e);
  }
 }

 protected void Page_Unload(object sender, EventArgs e)
 {



  if(Utility!=null) Utility.DBClose();
 }

 protected void Page_Init(object sender, EventArgs e)
 {



  InitializeComponent();
  Form_update.ServerClick += new System.EventHandler (this.Form_Action);
  Form_cancel.ServerClick += new System.EventHandler (this.Form_Action);


 }





        private void InitializeComponent()
        {
        }


        protected void Page_Show(object sender, EventArgs e)
        {
  Form_Show();

        }












private bool Form_Validate(){
 bool result=true;
 Form_ValidationSummary.Text="";

 for(int i=0;i<Page.Validators.Count;i++){
  if(((System.Web.UI.WebControls.BaseValidator)Page.Validators[i]).ID.ToString().StartsWith("Form")){
   if(!Page.Validators[i].IsValid){
    Form_ValidationSummary.Text+=Page.Validators[i].ErrorMessage+"";
    result=false;
   }
  }
 }

 Form_ValidationSummary.Visible=(!result);
 return result;
}

/*===============================
 Display Record Form
-------------------------------*/


void Form_Show() {


 Utility.buildListBox(Form_card_type_id.Items,"select card_type_id,name from card_types order by 2","card_type_id","name","","");

 bool ActionInsert=true;

 if (p_Form_member_id.Value.Length > 0 ) {
  string sWhere = "";

  sWhere += "member_id=" + CCUtility.ToSQL(p_Form_member_id.Value, FieldTypes.Number);



  string sSQL = "select * from members where " + sWhere;
  OleDbDataAdapter dsCommand = new OleDbDataAdapter(sSQL, Utility.Connection);
  DataSet ds = new DataSet();
  DataRow row;

  if (dsCommand.Fill(ds, 0, 1, "Form") > 0) {
  row = ds.Tables[0].Rows[0];

 Form_member_id.Value = CCUtility.GetValue(row, "member_id");


 Form_member_login.Text =Server.HtmlEncode(CCUtility.GetValue(row, "member_login").ToString());




 Form_member_password.Text = CCUtility.GetValue(row, "member_password");
 Form_name.Text = CCUtility.GetValue(row, "first_name");
 Form_last_name.Text = CCUtility.GetValue(row, "last_name");
 Form_email.Text = CCUtility.GetValue(row, "email");
 Form_address.Text = CCUtility.GetValue(row, "address");
 Form_phone.Text = CCUtility.GetValue(row, "phone");
 Form_notes.Text = CCUtility.GetValue(row, "notes");



  {string s;
  s=CCUtility.GetValue(row, "card_type_id");

  try {Form_card_type_id.SelectedIndex=Form_card_type_id.Items.IndexOf(Form_card_type_id.Items.FindByValue(s));
  }catch{}}


 Form_card_number.Text = CCUtility.GetValue(row, "card_number");

  ActionInsert=false;




 }}

  if(ActionInsert){

  String pValue;

  if(Session["UserID"]!=null)
  pValue = Session["UserID"].ToString();
  else
  pValue="";Form_member_id.Value = pValue;Form_update.Visible=false;




}














 }




 void Form_BeforeSQLExecute(string SQL,String Action){




 }


 bool Form_update_Click(Object Src, EventArgs E) {
     string sWhere = "";
  string sSQL ="";

  bool bResult=Form_Validate();
  if(bResult){

         if (p_Form_member_id.Value.Length > 0) {
             sWhere = sWhere + "member_id=" + CCUtility.ToSQL(p_Form_member_id.Value, FieldTypes.Number);
      }




  if (bResult){

  sSQL = "update members set " +
  "[member_password]=" +CCUtility.ToSQL(Utility.GetParam("Form_member_password"),FieldTypes.Text)  +
  ",[first_name]=" +CCUtility.ToSQL(Utility.GetParam("Form_name"),FieldTypes.Text)  +
  ",[last_name]=" +CCUtility.ToSQL(Utility.GetParam("Form_last_name"),FieldTypes.Text)  +
  ",[email]=" +CCUtility.ToSQL(Utility.GetParam("Form_email"),FieldTypes.Text)  +
  ",[address]=" +CCUtility.ToSQL(Utility.GetParam("Form_address"),FieldTypes.Text)  +
  ",[phone]=" +CCUtility.ToSQL(Utility.GetParam("Form_phone"),FieldTypes.Text)  +
  ",[notes]=" +CCUtility.ToSQL(Utility.GetParam("Form_notes"),FieldTypes.Text)  +
  ",[card_type_id]=" +CCUtility.ToSQL(Utility.GetParam("Form_card_type_id"),FieldTypes.Number)  +
  ",[card_number]=" +CCUtility.ToSQL(Utility.GetParam("Form_card_number"),FieldTypes.Text) ;


         sSQL = sSQL + " where " + sWhere;



Form_BeforeSQLExecute(sSQL,"Update");
  OleDbCommand cmd = new OleDbCommand(sSQL, Utility.Connection);
   try {
    cmd.ExecuteNonQuery();
   } catch(Exception e) {
    Form_ValidationSummary.Text += e.Message;
    Form_ValidationSummary.Visible = true;
    return false;
   }
  }

  if (bResult){


  }
  }
  return bResult;
 }

bool Form_cancel_Click(Object Src, EventArgs E) {




 return true;
 }

void Form_Action(Object Src, EventArgs E) {
bool bResult=true;
if(((HtmlInputButton)Src).ID.IndexOf("update")>0) bResult=Form_update_Click(Src,E);
if(((HtmlInputButton)Src).ID.IndexOf("cancel")>0) bResult=Form_cancel_Click(Src,E);


if(bResult)Response.Redirect(Form_FormAction+"");
}




    }
}
 